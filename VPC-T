#code commit chnages 
# Configure the AWS provider
provider "aws" {
  region = "uk-west-2"
}

# Create a VPC
resource "aws_vpc" "main" {
  cidr_block = "10.0.0.0/16"
  enable_dns_support = true
  enable_dns_hostnames = true
  tags = {
    Name = "my-vpc"
  }
}

# Create two subnets
resource "aws_subnet" "public" {
  count = 2
  vpc_id = aws_vpc.main.id
  cidr_block = element(["10.0.1.0/24", "10.0.2.0/24"], count.index)
  availability_zone = element(["us-east-1a", "us-east-1b"], count.index)
  map_public_ip_on_launch = true
}

resource "aws_security_group" "allow_web" {
  name_prefix = "allow-web-"
  description = "Allow inbound HTTP/HTTPS traffic"
  vpc_id = aws_vpc.main.id
  egress {
    from_port = 0
    to_port = 0
    protocol = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
  ingress {
    from_port = 80
    to_port = 80
    protocol = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  ingress {
    from_port = 443
    to_port = 443
    protocol = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# Create IAM role for EC2 instances
resource "aws_iam_instance_profile" "example" {
  name = "example-ec2-role"
  role = aws_iam_role.example.name
}

resource "aws_iam_role" "example" {
  name = "example-ec2-role"
  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Principal": {
        "Service": "ec2.amazonaws.com"
      },
      "Effect": "Allow",
      "Sid": ""
    }
  ]
}
EOF
}

resource "aws_iam_policy_attachment" "example" {
  name = "example-ec2-policy"
  policy_arn = "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
  roles = [aws_iam_role.example.name]
}

resource "aws_instance" "web" {
  ami           = "ami-0c55b159cbfafe1f0"
  instance_type = "t2.micro"
  subnet_id     = element(aws_subnet.public[*].id, 0)
  security_groups = [aws_security_group.allow_web.id]
  iam_instance_profile = aws_iam_instance_profile.example.name
  tags = {
    Name = "web-instance"
  }
}

resource "aws_lb" "example" {
  load_balancer_type = "application"
  internal          = false
  security_groups   = [aws_security_group.allow_web.id]
  subnets           = aws_subnet.public[*].id
  enable_deletion_protection = false

  enable_http2     = true
  enable_deletion_protection = false
  name            = "example-lb"
  enable_deletion_protection = false
  enable_cross_zone_load_balancing = false
  idle_timeout    = 60
  enable_deletion_protection = false
}

resource "aws_route_table" "example" {
  vpc_id = aws_vpc.main.id
}

resource "aws_route_table_association" "public" {
  count          = 2
  subnet_id      = element(aws_subnet.public[*].id, count.index)
  route_table_id = aws_route_table.example.id
}

resource "aws_route" "nat" {
  route_table_id            = aws_route_table.example.id
  destination_cidr_block    = "0.0.0.0/0"
  gateway_id                = "igw-0123456789abcdef0"  # Replace with your Internet Gateway ID
}

resource "aws_route" "web" {
  route_table_id            = aws_route_table.example.id
  destination_cidr_block    = "0.0.0.0/0"
  nat_gateway_id            = "nat-0123456789abcdef0"  # Replace with your NAT Gateway ID
}

# Output the public IP of the instance
output "public_ip" {
  value = aws_instance.web.public_ip
}
